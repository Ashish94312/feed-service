// package graph

// // This file will be automatically regenerated based on the schema, any resolver implementations
// // will be copied through when generating and any unknown code will be moved to the end.
// // Code generated by github.com/99designs/gqlgen version v0.17.72

// import (
// 	"context"
// 	"feed-service/graph/generated"
// 	"feed-service/graph/model"
// 	"fmt"
// )

// // GetTimeline is the resolver for the getTimeline field.
// func (r *queryResolver) GetTimeline(ctx context.Context, userID string) ([]*model.Post, error) {
// 	panic(fmt.Errorf("not implemented: GetTimeline - getTimeline"))
// }

// // Query returns generated.QueryResolver implementation.
// func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// type queryResolver struct{ *Resolver }

package graph

import (
	"context"
	"feed-service/data"
	"feed-service/graph/generated"
	"feed-service/graph/model"
	pb "feed-service/proto"
	"log"
	"sort"
	"sync"
	"time"
)

type queryResolver struct{ *Resolver }

func (r *queryResolver) GetTimeline(ctx context.Context, userID string) ([]*model.Post, error) {
	followed := data.Followers[userID]

	var (
		mu       sync.Mutex
		allPosts []data.Post
		wg       sync.WaitGroup
	)

	for _, f := range followed {
		wg.Add(1)
		go func(fid string) {
			defer wg.Done()

			resp, err := r.PostsClient.ListPostsByUser(ctx, &pb.ListPostsRequest{UserId: fid})
			if err != nil {
				log.Printf("failed to fetch posts for user %s: %v", fid, err)
			}

			var fetched []data.Post
			for _, p := range resp.Posts {
				fetched = append(fetched, data.Post{
					ID:        p.Id,
					AuthorID:  p.AuthorId,
					Content:   p.Content,
					Timestamp: time.Unix(p.Timestamp, 0),
				})
			}

			mu.Lock()
			allPosts = append(allPosts, fetched...)
			mu.Unlock()
		}(f)
	}

	wg.Wait()

	sort.Slice(allPosts, func(i, j int) bool {
		return allPosts[i].Timestamp.After(allPosts[j].Timestamp)
	})

	if len(allPosts) > 20 {
		allPosts = allPosts[:20]
	}

	var gqlPosts []*model.Post
	for _, p := range allPosts {
		gqlPosts = append(gqlPosts, &model.Post{
			ID:        p.ID,
			AuthorID:  p.AuthorID,
			Content:   p.Content,
			Timestamp: p.Timestamp.Format(time.RFC3339),
		})
	}

	return gqlPosts, nil
}

func (r *Resolver) Query() generated.QueryResolver {
	return &queryResolver{r}
}
